HTML
-opening and closing tags (<h1> </h1>) (h1-h6)

<p> - preferred element for normal-sized paragraph text

<!--""""--> - Comments

style - way to change elements characteristics...

'color:' - is what controls text color

'font-size:' - 

'font-family:' - 

ex> <h2 style="color:blue">CatPhotoApp</h2>

W/ CSS properties, hundreds of props that you can change...

Can create a <style></style> at top of code and can create CSS selector for all elements w/ specific tag

Ex> cd 

<style>
	h2 {color:red;}
	.example-text {color:red;}
</style>

CSS Class to style an element (reusable styles that can be added to HTML elements.)

Class designation = .example-text {color: blue;}

then use as...

<h2 class="example-text">CatPhotoApp</h2>

Can import font from Google...(need to link @ top of main.html or CSS docs)
-Then  either add to class, element, etc in style section...

Several fonts avail in all browsers:
(Monospace, Serif, Sans-Serif)

In styling, you can add instructions on how to fonts should depreciate by seperating them by a ',' before the ';'...

Can add Images to your Website....
-Do w/ 'img' element and point to 'src'

Ex>

<img src="https://www.your-image-source.com/your-image.jpg" alt="text about what your image is.">

-all img elements must have an 'alt' attribute which is used for screen readers to improve accessibility and is displaying if the image fails to load

CSS w/ a property 'width' (defined w/ 'px')
	-Used w/ images...

CSS borders (border-style, border-color, border-width, border-radius)
	-can define border-radius w/ px or %

Link to external pages w/ Anchor Elements

Ex>
<p>Normal text<a href='...link to external page...'>the links text</a>remainder of normal text</p>

Can do the same thing w/ images by wrapping them in <a> tags...

Bulleted Unorder/Ordered Lists

<ul> = Unordered list

<ol> = Ordered list

<li> = list items

Creating a Web Form (inc. place holder)

<input type="text" placeholder="this is placeholder text">

-Note: input elements are self-closing

Can build web froms that sub data to server w/ pure html...

<form action="/url-where-you-want-to-submit-form-data"></form>
	-wrap this around next text fields w/in

Adding a Submit Button
-clicking will send the data from your form to the URL specified in 'action' tag
-inc. inside the form tags

<button type="submit">this button submits the form</button>


Use HTML5 to Require a field
-can make a field required...

<input type="text" required>

Create Radio Buttons
-type of input
-each of btns should be nested w/in 'label' element
-all related shoud have same 'name' attrib

<label><input type="radio" name="indoor-outdoor">Indoor</label>

Create Check Boxes
-type of input
-for ?s may have more 1 answer
-each need be nested w/in 'label' element
-all related should have same 'name' attrib

<label><input type="checkbox" name="personality">Loving</label>

Make Default
-can set as default w/ 'checked' attrib inside input element

<input type="radio" name="test-name" checked>

Nest many Elements w/in single Div element
-division element
-general purpose container for other elements
-useful for passing CSS of its own class declar down to all elements w/in

CSS for Background Color  (background-color)

ID of an Element
-in add to classes, can have 'id' element
-should be unique (bp)

<h2 id="cat-photo-app">

-can be used to style w/ CSS

#cat-photo-element{
	background-color:green;
}

HTML Styling
-3 properties control space that surrounds HTML element

-padding- controls amt space b/t element & border
-margin- controls amt space b/t elements border and surrounding elements --negative values make element grow larger
-border-

*can customize elem. so w/ diff padding on each side
-padding-top, padding-right, padding-bottom, padding-left

*can do same thing w/ margins (margin-top, margin-right, margin-bottom, margin-left)

Use Clockwise Notation to specify padding
padding: 10px 20px 10px 20px;
*can do same thing w/ margins...

CSS Inheritance
-every HTML page has a 'body' element
-all your elements w/in body, will inherit 'body' element's styles
-if class, etc assigned to an element, it will override the 'body' style assigned
-can override classes w/ other classes... 'class= "pink-text blue-text"'
	-blue text will be the one applied
-can also override classes w/ ids(#)
-can override class declar w/ Inline styles
-can use '!important' to override all other styles (add to element in <Style> section)

HEX Codes for Colors (and other options...)
-uses 0-9 and A-F (uses 6 hexadecimal digits to rep colors; 2 each for R,G,B)
- 'background-color: #000000'
-can use abbrev HEX codes too
-can use RGB values
-written as rgb(255, 255, 255)

Using Responsive Design Boostrap Fluid Containers...
-BS will figure how wide your screen is & respond by resizing ur HTML elem.  (Responsive design)
-can add BS to any app w/ this @ top of HTML
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
-encase stuff in <div class="container-fluid"></div>

-can make image responsive/width of screen...
-do w/ class="img-responsive"

-center text w/ class="text-center"

Bootstrap Buttons...
-BS w/ own styles for 'button' elements
-class = 'btn'
-<button types="button|submit|reset">
-usu. button elem w/ class 'btn' only as big as text w/in
	-w/ class 'btn-block' your button will stretch to fill pages entire horz space
	-still need the 'btn' class
-classes that conrtol color of buttons
	-'btn-primary'  (blueish - darker)
	-'btn-info' (light blueish)
	-'btn-danger' (red)
-BS has class called 'btn-default'

Bootstrap Grid...
-BS uses responsive grid make easy put elem into rows, specify elem width (based on 12 total)
-most BS classes can be applied to <div> element (ex> col-med-*)
	-xs (for phones)
	-sm (for tablets)
	-md (for desktops)
	-lg (for lg desktops)

-so 1 <div class='row'>
	-then elem inside w/in <div class='col-xs-4'>
	-then all will be w/in same "row"


Using Bootstraps CSS
-BS provides built in styles

Use Spans for inline elements
-w/ span element, can put several elem together & style diff parts of same elem differently
-Ex> '<p>Things cats <span class= "text-danger">love</span>:</p>''

Add Fond Awesome Icons to Buttons
-Font Awesome is library of icons (vector icons in .svg format)
-Icons treated just like fonts (size w/ pixels)
-add the Font Awesome classes to the 'i' elem to turn into icon
-Ex> '<i class="fa fa-info-circle"></i>'

Responsively Style Radio Buttons
-Can use BS col-xs-* class on form elements too
-Nest all w/in <div class="row">, then each individual elem in <div class="col-xs-*">

Bootstrap Wells
-BS has class called 'well' that can create visual sense of depth for columns

Create Class to target w/ jQuery Selectors
-not every class needs corresp CSS
-can use for purpose of seleting elements more easily w/ jQ


jQuery Stuff
- <script></script> at the top of doc
-browser will run any JS in this element
-document.ready stuff
	$(document).ready(function() {

	});
	-code you put in this fcn will run as soon as your broswer has loaded the page
	-important b/c w/o your 'document ready function' your code may run before your HTML is rendered (result in bugs)
-all jQ fcns start w/ '$'
-jQ often selects an HTML elem w/ a 'selector' that does something to that elem
-for example, w/in $(document).ready(function())
	$("button").addClass("animated bounce");  -- make all button bounce on load...
	-using jQ to apply Animate.css 'bounce' to 'button' elem

Target Elem by Class w/ jQ
-selected elem w/ $("button")
-added classes to them w/ .addClass("animated bounce");
ex>  $(".well").addClass("animated shake");

Target Elem by ID w/ jQ
-$("#target3").addClass("animated fadeOut");

Target same Elem w/ mult. jQ Selectors
-3 ways of targeting element (by type, by class, by id)

Remove Classes from Elem w/ jQ
-can also remove classes w/ .removeClass()

Change CSS of Elem w/ jQ
-using jQ fcn '.css()'
ex> $("#target1").css("color", "blue");

Disable an Elem w/ jQ
-can change non-CSS properties of HTML elem.
-using jQ fcn '.prop()' - adjust properties of elem...
ex> $("button").prop("disabled", true);

Change Text inside an Elem w/ jQ
-can change text b/t start/close tags
-using jQ fcn '.html()' - lets you add HTML tags and text w/in an elem
-any content there prev will be replaced
ex> $("h3").html("<em>jQuery Playground</em>");
-also w/ '.text()' jQ fcn - allow alter test w/o adding tags

Remove an Elem w/ jQ
-using jQ fcn '.remove()' - remove HTML elem entirely
ex> $("#target4").remove()

Use 'appendTo' to Move Elem. w/ jQ
-using jQ fcn '.appendTo()' - select HTML elem and append to another element
ex> $("#target4").appendTo("#left-well");

Clone an Elem w/ jQ
-can oply elem from one place to another
-using jQ fcn '.clone()' - makes a copy of an elem
ex> $("#target2").clone().appendTo("#right-well");
			-->>funtion chaining...

Target Parent of an Elem w/ jQ
-every HTML elem w/ a 'parent' from which it 'inherits' properties
-using jQ fcn '.parent()' - access to parent of whichever elem you've selected
ex> $("left-well").parent().css("background-color", "blue");

Target Childern of an Elem w/ jQ
-many HTML elem w/ 'Childern' that 'inherit' properties from their parent
-using jQ fcn '.childern()' - access to childern of whichever elem you've selected
ex> $("#left-well").childern().css("color", "blue");

Target Specific Child of an Elem w/ jQ
-now you've seen benefits of '#id', but won't always have ids
-jQ uses CSS Selectors to target elem  'target:nth-child(n)' - allos you to select all the nth elem w/ target class or elem type
ex> $(".target:nth-child(3)").addClass("animated bounce");
-can do same as above, but select all even/odd/formula to apply to...

Use jQ to Modify the Entire Page
-jQ can target 'body' elem as well
-make entire body fade out
	ex> $("body").addClass("animated fadeOut");




<--------------JAVASCRIPT------------>


//  - Inline comments

/* use this for multiline comments */

JS datatypes = undefined, null, boolean, string, symbol, number, object

Variables - allow computers to store and manip data in dynameic fashion

var ourName;  (creates a variable called 'ourName')
-No spaces or start w/ number

Store a value in variable w/ 'assignment' operator of '='

-When JS var are declared, they ahve initial value of 'undefined'
-trying math oper on 'undefined' will result in NaN (not a number) 
-trying to concant string and 'undefined' result in "undefined"
-write vars in camelCase

-Can easily 'increment' or add 1 to a var w/ the ++ operator (i++;)
-Can easily 'decreemnt' or sub 1 from a var w/ the -- operator (i--;)

-'remainder' operator is % (i.e 5 % 2 = 1)
	-Use to check if number is odd or even

-Using augmented addition/subtraction/multiplication/division
- '+=' and '-=' and '*=' and '/='

-Escape a quote w/ '\' in front of quote (ex> "Don said \'That's how we do it!\'")

-Quotes aren't only chara that can be 'escaped'

\' - single quote
\" - double quote
\\ - backslash
\n - newline
\r - carriage return
\t - tab
\b - backspace
\f - form feed

ex> var myStr = "FirstLine\n\\SecondLine\\\rThirdLine";  - this would return

FirstLine
\SecondLine\
ThirdLine


-Can concant strings w/ the '+' operator, as well as the +=...

-Find length of a string = .length
	ex> firstName.length

Use Bracket Notation to Find the First Chara in a String
-way to get a chara at specific 'index'

String Immutablility
-in JS, string values are 'immutable' -- cannot be altered once created (need to reassign variable...)

Use Bracket Notation to Find the Last Chara in a String or Nth to last chara
ex> firstName[firstName.length - 1]
ex>firstName[firstName.length - 3]

Store Mult Values in One Var w/ Arrays
-start arrays w/ '[' and end w/ ']'
-you can nest arrays w/in one another... (nested arrays or 'multi-dimensional array')
ex> [['Bulls', 23], ['White Sox','45']]
-access array data w/ indexes...
ex> array[0] will return the first value in an array
-can modify array data in the same way
ex> ourArray[0] = 'NewData'
-access multi-dimensional arrays in the same way w/ indexes (ourArray[0][1])

Manip Arrays w/ Push
-append data to end of array w/ .push()
ex> var arr = [1,2,3];
	arr.push(4);
	// arr is now [1,2,3,4]

Manip Arrays w/ Pop
-'pop' a value off the end of an array w/ .pop() (always last value)
-can store popped value  by assigning to var
ex> var oneDown = [1,4,6].pop()
	//oneDown now = 6 and array = [1,4] 

Manip Arrays w/ Shift
-works like pop(), but removes the first element

Manip Arrays w/ Unshift
-add elements in front of the array w/ .unshift('add')


Write reusable JS w/ Functions
-divide code into reusable parts called 'functions'
ex>

function functionName(){
	console.log('Hello World');
}

-you can call or 'invoke' this fcn by using it's name followed by parentheses...
	--> functionName();

Pass values to Fcns w/ Arguments...
-'Parameters' are vars that act as placeholder for the values that are to be input to a fcn when called...
ex> 

function testFun(param1, param2) {
	console.log(param1, param2);
}

Global Scope and Functions
-'scope' refers to the visibility of var
-Vars defined outside of fcn block have 'Global' scope
-Variables which are used w/o the 'var' keyword are automatically created in the 'global' scope
	-Can cause issues, always declare variables w/ 'var'
