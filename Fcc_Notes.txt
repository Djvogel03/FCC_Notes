HTML
-opening and closing tags (<h1> </h1>) (h1-h6)

<p> - preferred element for normal-sized paragraph text

<!--""""--> - Comments

style - way to change elements characteristics...

'color:' - is what controls text color

'font-size:' - 

'font-family:' - 

ex> <h2 style="color:blue">CatPhotoApp</h2>

W/ CSS properties, hundreds of props that you can change...

Can create a <style></style> at top of code and can create CSS selector for all elements w/ specific tag

Ex> cd 

<style>
	h2 {color:red;}
	.example-text {color:red;}
</style>

CSS Class to style an element (reusable styles that can be added to HTML elements.)

Class designation = .example-text {color: blue;}

then use as...

<h2 class="example-text">CatPhotoApp</h2>

Can import font from Google...(need to link @ top of main.html or CSS docs)
-Then  either add to class, element, etc in style section...

Several fonts avail in all browsers:
(Monospace, Serif, Sans-Serif)

In styling, you can add instructions on how to fonts should depreciate by seperating them by a ',' before the ';'...

Can add Images to your Website....
-Do w/ 'img' element and point to 'src'

Ex>

<img src="https://www.your-image-source.com/your-image.jpg" alt="text about what your image is.">

-all img elements must have an 'alt' attribute which is used for screen readers to improve accessibility and is displaying if the image fails to load

CSS w/ a property 'width' (defined w/ 'px')
	-Used w/ images...

CSS borders (border-style, border-color, border-width, border-radius)
	-can define border-radius w/ px or %

Link to external pages w/ Anchor Elements

Ex>
<p>Normal text<a href='...link to external page...'>the links text</a>remainder of normal text</p>

Can do the same thing w/ images by wrapping them in <a> tags...

Bulleted Unorder/Ordered Lists

<ul> = Unordered list

<ol> = Ordered list

<li> = list items

Creating a Web Form (inc. place holder)

<input type="text" placeholder="this is placeholder text">

-Note: input elements are self-closing

Can build web froms that sub data to server w/ pure html...

<form action="/url-where-you-want-to-submit-form-data"></form>
	-wrap this around next text fields w/in

Adding a Submit Button
-clicking will send the data from your form to the URL specified in 'action' tag
-inc. inside the form tags

<button type="submit">this button submits the form</button>


Use HTML5 to Require a field
-can make a field required...

<input type="text" required>

Create Radio Buttons
-type of input
-each of btns should be nested w/in 'label' element
-all related shoud have same 'name' attrib

<label><input type="radio" name="indoor-outdoor">Indoor</label>

Create Check Boxes
-type of input
-for ?s may have more 1 answer
-each need be nested w/in 'label' element
-all related should have same 'name' attrib

<label><input type="checkbox" name="personality">Loving</label>

Make Default
-can set as default w/ 'checked' attrib inside input element

<input type="radio" name="test-name" checked>

Nest many Elements w/in single Div element
-division element
-general purpose container for other elements
-useful for passing CSS of its own class declar down to all elements w/in

CSS for Background Color  (background-color)

ID of an Element
-in add to classes, can have 'id' element
-should be unique (bp)

<h2 id="cat-photo-app">

-can be used to style w/ CSS

#cat-photo-element{
	background-color:green;
}

HTML Styling
-3 properties control space that surrounds HTML element

-padding- controls amt space b/t element & border
-margin- controls amt space b/t elements border and surrounding elements --negative values make element grow larger
-border-

*can customize elem. so w/ diff padding on each side
-padding-top, padding-right, padding-bottom, padding-left

*can do same thing w/ margins (margin-top, margin-right, margin-bottom, margin-left)

Use Clockwise Notation to specify padding
padding: 10px 20px 10px 20px;
*can do same thing w/ margins...

CSS Inheritance
-every HTML page has a 'body' element
-all your elements w/in body, will inherit 'body' element's styles
-if class, etc assigned to an element, it will override the 'body' style assigned
-can override classes w/ other classes... 'class= "pink-text blue-text"'
	-blue text will be the one applied
-can also override classes w/ ids(#)
-can override class declar w/ Inline styles
-can use '!important' to override all other styles (add to element in <Style> section)

HEX Codes for Colors (and other options...)
-uses 0-9 and A-F (uses 6 hexadecimal digits to rep colors; 2 each for R,G,B)
- 'background-color: #000000'
-can use abbrev HEX codes too
-can use RGB values
-written as rgb(255, 255, 255)

Using Responsive Design Boostrap Fluid Containers...
-BS will figure how wide your screen is & respond by resizing ur HTML elem.  (Responsive design)
-can add BS to any app w/ this @ top of HTML
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
-encase stuff in <div class="container-fluid"></div>

-can make image responsive/width of screen...
-do w/ class="img-responsive"

-center text w/ class="text-center"

Bootstrap Buttons...
-BS w/ own styles for 'button' elements
-class = 'btn'
-<button types="button|submit|reset">
-usu. button elem w/ class 'btn' only as big as text w/in
	-w/ class 'btn-block' your button will stretch to fill pages entire horz space
	-still need the 'btn' class
-classes that conrtol color of buttons
	-'btn-primary'  (blueish - darker)
	-'btn-info' (light blueish)
	-'btn-danger' (red)
-BS has class called 'btn-default'

Bootstrap Grid...
-BS uses responsive grid make easy put elem into rows, specify elem width (based on 12 total)
-most BS classes can be applied to <div> element (ex> col-med-*)
	-xs (for phones)
	-sm (for tablets)
	-md (for desktops)
	-lg (for lg desktops)

-so 1 <div class='row'>
	-then elem inside w/in <div class='col-xs-4'>
	-then all will be w/in same "row"


Using Bootstraps CSS
-BS provides built in styles

Use Spans for inline elements
-w/ span element, can put several elem together & style diff parts of same elem differently
-Ex> '<p>Things cats <span class= "text-danger">love</span>:</p>''

Add Fond Awesome Icons to Buttons
-Font Awesome is library of icons (vector icons in .svg format)
-Icons treated just like fonts (size w/ pixels)
-add the Font Awesome classes to the 'i' elem to turn into icon
-Ex> '<i class="fa fa-info-circle"></i>'

Responsively Style Radio Buttons
-Can use BS col-xs-* class on form elements too
-Nest all w/in <div class="row">, then each individual elem in <div class="col-xs-*">

Bootstrap Wells
-BS has class called 'well' that can create visual sense of depth for columns

Create Class to target w/ jQuery Selectors
-not every class needs corresp CSS
-can use for purpose of seleting elements more easily w/ jQ


jQuery Stuff
- <script></script> at the top of doc
-browser will run any JS in this element
-document.ready stuff
	$(document).ready(function() {

	});
	-code you put in this fcn will run as soon as your broswer has loaded the page
	-important b/c w/o your 'document ready function' your code may run before your HTML is rendered (result in bugs)
-all jQ fcns start w/ '$'
-jQ often selects an HTML elem w/ a 'selector' that does something to that elem
-for example, w/in $(document).ready(function())
	$("button").addClass("animated bounce");  -- make all button bounce on load...
	-using jQ to apply Animate.css 'bounce' to 'button' elem

Target Elem by Class w/ jQ
-selected elem w/ $("button")
-added classes to them w/ .addClass("animated bounce");
ex>  $(".well").addClass("animated shake");

Target Elem by ID w/ jQ
-$("#target3").addClass("animated fadeOut");

Target same Elem w/ mult. jQ Selectors
-3 ways of targeting element (by type, by class, by id)

Remove Classes from Elem w/ jQ
-can also remove classes w/ .removeClass()

Change CSS of Elem w/ jQ
-using jQ fcn '.css()'
ex> $("#target1").css("color", "blue");

Disable an Elem w/ jQ
-can change non-CSS properties of HTML elem.
-using jQ fcn '.prop()' - adjust properties of elem...
ex> $("button").prop("disabled", true);

Change Text inside an Elem w/ jQ
-can change text b/t start/close tags
-using jQ fcn '.html()' - lets you add HTML tags and text w/in an elem
-any content there prev will be replaced
ex> $("h3").html("<em>jQuery Playground</em>");
-also w/ '.text()' jQ fcn - allow alter test w/o adding tags

Remove an Elem w/ jQ
-using jQ fcn '.remove()' - remove HTML elem entirely
ex> $("#target4").remove()

Use 'appendTo' to Move Elem. w/ jQ
-using jQ fcn '.appendTo()' - select HTML elem and append to another element
ex> $("#target4").appendTo("#left-well");

Clone an Elem w/ jQ
-can oply elem from one place to another
-using jQ fcn '.clone()' - makes a copy of an elem
ex> $("#target2").clone().appendTo("#right-well");
			-->>funtion chaining...

Target Parent of an Elem w/ jQ
-every HTML elem w/ a 'parent' from which it 'inherits' properties
-using jQ fcn '.parent()' - access to parent of whichever elem you've selected
ex> $("left-well").parent().css("background-color", "blue");

Target Childern of an Elem w/ jQ
-many HTML elem w/ 'Childern' that 'inherit' properties from their parent
-using jQ fcn '.childern()' - access to childern of whichever elem you've selected
ex> $("#left-well").childern().css("color", "blue");

Target Specific Child of an Elem w/ jQ
-now you've seen benefits of '#id', but won't always have ids
-jQ uses CSS Selectors to target elem  'target:nth-child(n)' - allos you to select all the nth elem w/ target class or elem type
ex> $(".target:nth-child(3)").addClass("animated bounce");
-can do same as above, but select all even/odd/formula to apply to...

Use jQ to Modify the Entire Page
-jQ can target 'body' elem as well
-make entire body fade out
	ex> $("body").addClass("animated fadeOut");




<--------------JAVASCRIPT------------>


//  - Inline comments

/* use this for multiline comments */

JS datatypes = undefined, null, boolean, string, symbol, number, object

Variables - allow computers to store and manip data in dynameic fashion

var ourName;  (creates a variable called 'ourName')
-No spaces or start w/ number

Store a value in variable w/ 'assignment' operator of '='

-When JS var are declared, they ahve initial value of 'undefined'
-trying math oper on 'undefined' will result in NaN (not a number) 
-trying to concant string and 'undefined' result in "undefined"
-write vars in camelCase

-Can easily 'increment' or add 1 to a var w/ the ++ operator (i++;)
-Can easily 'decreemnt' or sub 1 from a var w/ the -- operator (i--;)

-'remainder' operator is % (i.e 5 % 2 = 1)
	-Use to check if number is odd or even

-Using augmented addition/subtraction/multiplication/division
- '+=' and '-=' and '*=' and '/='

-Escape a quote w/ '\' in front of quote (ex> "Don said \'That's how we do it!\'")

-Quotes aren't only chara that can be 'escaped'

\' - single quote
\" - double quote
\\ - backslash
\n - newline
\r - carriage return
\t - tab
\b - backspace
\f - form feed

ex> var myStr = "FirstLine\n\\SecondLine\\\rThirdLine";  - this would return

FirstLine
\SecondLine\
ThirdLine


-Can concant strings w/ the '+' operator, as well as the +=...

-Find length of a string = .length
	ex> firstName.length

Use Bracket Notation to Find the First Chara in a String
-way to get a chara at specific 'index'

String Immutablility
-in JS, string values are 'immutable' -- cannot be altered once created (need to reassign variable...)

Use Bracket Notation to Find the Last Chara in a String or Nth to last chara
ex> firstName[firstName.length - 1]
ex>firstName[firstName.length - 3]

Store Mult Values in One Var w/ Arrays
-start arrays w/ '[' and end w/ ']'
-you can nest arrays w/in one another... (nested arrays or 'multi-dimensional array')
ex> [['Bulls', 23], ['White Sox','45']]
-access array data w/ indexes...
ex> array[0] will return the first value in an array
-can modify array data in the same way
ex> ourArray[0] = 'NewData'
-access multi-dimensional arrays in the same way w/ indexes (ourArray[0][1])

Manip Arrays w/ Push
-append data to end of array w/ .push()
ex> var arr = [1,2,3];
	arr.push(4);
	// arr is now [1,2,3,4]

Manip Arrays w/ Pop
-'pop' a value off the end of an array w/ .pop() (always last value)
-can store popped value  by assigning to var
ex> var oneDown = [1,4,6].pop()
	//oneDown now = 6 and array = [1,4] 

Manip Arrays w/ Shift
-works like pop(), but removes the first element

Manip Arrays w/ Unshift
-add elements in front of the array w/ .unshift('add')


Write reusable JS w/ Functions
-divide code into reusable parts called 'functions'
ex>

function functionName(){
	console.log('Hello World');
}

-you can call or 'invoke' this fcn by using it's name followed by parentheses...
	--> functionName();

Pass values to Fcns w/ Arguments...
-'Parameters' are vars that act as placeholder for the values that are to be input to a fcn when called...
ex> 

function testFun(param1, param2) {
	console.log(param1, param2);
}

Global Scope and Functions
-'scope' refers to the visibility of var
-Vars defined outside of fcn block have 'Global' scope
-Variables which are used w/o the 'var' keyword are automatically created in the 'global' scope
	-Can cause issues, always declare variables w/ 'var'

Local Scope and Functions
-Vars declared w/in a fcn & fcn param only w/ Local scope


**It's possible to have Local and Global var w/ same name.  When you do this, Local takes precedence over Global...

Using 'Return' to get value from a Fcn
-use 'return' statement to send a value back out of fcn
-can assign a returned value (from a fcn) to a var


-In CS, a 'queue' is an abstract Data Structure where items are kept in order.
-New items can be added to the back and old items taken off the front


Understanding Boolean Values
-'true' and 'false'

Use Conditional Logic w/ If Statements
-used to make decisions
-'if' tell JS to executre code in curly braces under certain cond, defined in the parentheses...
-these conditions known as Boolean cond..
	-can only be true or false
	-if true, then executed, if false, then not...

syntax>

if (condition is true) {
	//code to be executed
}

Comparison w/ Equality Operator
-many diff 'comparison operators'
-all return a true or false
- '==' is equality operator
- '===' is strict equality operator (datatype checked too)
- '!=' is inequality
- '!==' is strict inequality
- '>' is greater than
- '>=' is greater than or equal to
- '<' is less than
- '<=' is less than or equal to
- '&&' is and operator
- '||' is or operator


Else Statements...
-alternate block of code to run if 'if' statement is false

ex>

if (num > 10) {
	reutnr 'Bigger than 10';
} else {
	return '10 or less';
}

-can use 'else if' if have mult conditions that need to be addressed
-order is very important in these types of statements

ex>

if (num > 15) {
	return 'Bigger than 15';
} else if (num < 5) {
	return 'Smaller than 5';
} else {
	return 'Between 5 and 15';
}

Switch Statements...
-Used when many options to chosse from
-Tests a value & can have many case statements w/ various possible values
-Statements executed from 1st matched 'case' until 'break' encountered
-'case' values tested w/ ===

ex>

switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  case valueN:
    statementN;
    break;

  default:
    defaultStatement;
}

-can also use following syntax if you have multiple 'cases' w/ same output...

ex>

switch(val) {
    case 1:
    case 2:
    case 3:
        result = "1,2, or 3";
	break;
    case 4:
        result = '4 alone';
}

Feturning Boolean Values from Fcns
-common 'anti-pattern' is to use if/else statement to do a comparison, then return 'true' or 'false'
-since '===' reutrns true or false, we can do comparisons like:

function isEqual(a,b) {
    return a === b;
}

Return Early Pattern for Functions
-When 'return' is reached, execution of current fcn stops and control returns to calling location

Build JavaScript Objects
-Obj similar to 'arrays' except instead of using indexes to access & mod data, you access data w/ 'properties'
-Useful for storing data in structured way & can represent real world objects...
ex>

var cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

Accessing Obj properties w/ dot operator
-2 ways to access the properties of an object
	1) the dot operator (.)  - used when know the name of the property your trying to access ahead of time
	ex> 
	var myObj = {
  	  prop1: "val1",
  	  prop2: "val2"
	};
	var prop1val = myObj.prop1; // val1
	var prop2val = myObj.prop2; // val2
	
	2) bracket notation ([])  - need to use if property of obj has a space in it
	  - Note: property names w/ spaces in them must be in quotes
	ex>
	var myObj = {
  	  "Space Name": "Kirk",
  	  "More Space": "Spock"
	};
	myObj["Space Name"]; // Kirk
	myObj['More Space']; // Spock


Accessing Obj properties w/ Variables
-another use for bracket notation is to use a variable to access a property
-useful for iterating through lists of the obj prop for for look up needs

ex>
var someProp= "propName";
var myObj= {
	propName: "Some Value";
}
myObj[someProp]; // "Some Value"

ex>
var myDog = 'Hunter';
var dogs = {
	Fido: "Mutt",
	Hunter: "Doberman",
	Snoopie: "Beagle"
}
var breed = dogs[myDog];
console.log(breed); // "Doberman"

-Note: do NOT use quotes around the var name when using it to access the property b/c we are using the value of the variable, not the name


Updating Object Props
-after obj been created, can update the prop...
-can use dot or bracket notation
ex>
	ourDog.name = 'Happy Camper';
	outDog["name"] = 'Happy Camper';

Add New Props to JS obj
-can add new prop, same way you modify props
-use either bracket or dot notation

Delete Props from JS obj
- use following syntax

delete myObj.prop;

Using obj for lookups
-think of obj as key/value storage
-most useful when know input data is limited to certain range

Testing Obj for Props
-useful to check if prop of given obj exists
-can use the:
	.hasOwnProperty(propname) method of objs to determine if obj has given prop name
	-will return true or false

Manip Complex Objs
-Sometimes you want store data in flex 'data structure'
-allow for arbitrary combo of strings, number, booleans, arrays, fcns, objs

ex>  this is an array w/ one obj inside

var ourMusic = [
  {
    "artist": "Daft Punk",
    "title": "Homework",
    "release_year": 1997,
    "formats": [ 
      "CD", 
      "Cassette", 
      "LP" ],
    "gold": true
  }
];

-if you want to add more album records, you can do by adding records to the top level array
-JSON is a related data interchange format used to store data
-Note: need to put comma after each object in the array

Accessing Nested Obj
-sub-props of objs can be acces by chaining together the dot or bracket notation

ex> 

var ourStorage = {
  "desk": {
    "drawer": "stapler"
  },
  "cabinet": {
    "top drawer": { 
      "folder1": "a file",
      "folder2": "secrets"
    },
    "bottom drawer": "soda"
  }
};
ourStorage.cabinet["top drawer"].folder2;  // "secrets"
ourStorage.desk.drawer; // "stapler"

Accessing Nested Arrays
-similar to accessing nested obs, array bracket notation can be used

ex>

var ourPets = [
  {
    animalType: "cat",
    names: [
      "Meowzer",
      "Fluffy",
      "Kit-Cat"
    ]
  },
  {
    animalType: "dog",
    names: [
      "Spot",
      "Bowser",
      "Frankie"
    ]
  }
];
ourPets[0].names[1]; // "Fluffy"
ourPets[1].names[0]; // "Spot"

Iterate w/ JS for Loops
-run same code multiple times w/ loops
-most common is a 'for loop'
	-runs specific # of times
-run w/ 3 optional expressions sep by ;

for ([initialization]; [condition]; final-expression])

-'initialization' = executed one time only before loop starts
	-define and setup loop var

-'condition' = evaluated at begin every loop iter and cont as long as = true; when false, loop stops executing

-'final-expression' = executed @ end of each loop iter prior to next 'condition' check
	-usu used to increment or decrement loop counter

ex>

var ourArray=[]
for (var i = 0; i < 5; i++) {
	ourArray.push(i);
}

now ourArray = [0,1,2,3,4];

-Note: for loops don't have to iter one @ a time, can count by even or odd num too, just need to change 'final-expression'

Count Backwards w/ a For Loop
-need to change the initialization condition and final-expression

ex>

var ourArray = [];
for (var i=10; i > 0; i-=2) {
  ourArray.push(i);
}

Iterate Through array w/ For Loop
-One way to do is w/ For Loop

ex>

var arr = [10,9,8,7,6];
for (var i = 0; i < arr.length; i++) {
	console.log(arr[i]);
}

Nesting For Loops
-oft used w/ multi-dimensional array

ex>

var arr = [
  [1,2], [3,4], [5,6]
];
for (var i=0; i < arr.length; i++) {
  for (var j=0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}

*This will output each sub-elemt in arr one at a time
*Note in inner loop, checking the length of arr[i], since it is an array


Iterate w/ JS WHILE loops
-runs 'while' a specific condition is 'true'

ex>

var ourArray=[];
var i = 0;
while (i < 5) {
	ourArray.push(i);
	i++;
}

Generate Random Fractions w/ JS
-random nums are useful for createing random behavior
-JS w/ Math.random() fcn that generate a random decimal b/c 0(inclusive) and 1(exclusive)

Generate Random Whole Numbers w/ JS
-Math.random * 20 and Math.floor() to round down, will give #s b/t 0-19

Generate Random Whole Numbers w/in a range
-can generate a random number that falls w/in a range of 2 specific numbers
-to do this, we'll define a min and max #s

Math.floor(Math.random() * (max-min+1)) + min

Sift through text w/ Regular Expressions
-RE used to find certain words, patterns in strings
-regular expression: /the/gi

/ = start of RE
the = pattern we want to match
/ = end of RE
g = global = causes the pattern to return all matched in the string, not just 1st
i = means ingnore the case when searchin for pattern

ex>

var testString = 'Ada LoveLace and Charles Babbage designed the first computer and the software that would have run on it.';

var expression = /and/gi;

var andCount = testString.match(expression).length;

Finding Numbers w/ REs
-can use special selectors in REs to select a particular type of value
\d = digit selectro (used to retrieve one digit (0-9) in a string)
ex> /\d/g (if you add a '+' after selector (/\d+/g) allows this regular expression to match one or more digits

Find whitespace w/ REs
-other RE selectors that can be used
\s = whitespace in a string
' ' = space
\r = carriage return
\n = newline
\t = tab
\f = form feed

Invert RE Matches w/ JS
-you can invert any match by suing the uppercase of the RE selector
-so, \s will match any whitespace and \S will match anything that isn't whitespace

Construct JS Objs w/ Fcns
-can create Objs w/ 'constructor' functions
-'constructor' fcns are given a Capitalized name to make obv what they are

ex>

Var Car = function() {
	this.wheels = 4;
	this.engines = 1;
	this.seats = 5;
};

-'this' refers to the new obj being created by constructor

Make instances of Objs w/ a Constructor Fcn
-to use a constructor fcn, we call it w/ the 'new' keyword in front

ex> var myCar = new Car();
*myCar is now an 'instance' of the 'Car' constructor (w/ all prop of 'Car')


Make unique Objs by Passing Param to our Constructor
-what if don't always want to create the same obj...
-can add 'parameters' to our 'constructor'

ex>

var Car = function(wheels, seats, engines) {
	this.wheels = wheels;
	this.seats = seats;
	this.engines = engines;
}

create ex> var myCar = new Car(6,3,1);

Make Obj Properties Private
-Objs have own attributes (Properties) and their own fcns (Methods)
-can create 'private properties' and 'private methods' which aren't accessible from outside the object
-to do, create the variable inside the 'constructor' using the var keyword (instead of created as a property of 'this')
-useful for when we need to store info abt an obj, but want to control how its used by outside code...
-ex> say want to store 'speed' car is traveling, but onl want outside code to be able to mod by accerating or decelrating, so speed changes in controlled way...

ex>

var Car = function() {
  // this is a private variable
  var speed = 10;

  // these are public methods
  this.accelerate = function(change) {
    speed += change;
  };

  this.decelerate = function() {
    speed -= 5;
  };

  this.getSpeed = function() {
    return speed;
  };
};

Iterate over Arrays w/ Map
-'map' method is convenient way to iterate through arrays
-will iterate through every elem of array, reate a new array w/ vals modified by the callback fcn and return it
-note: doesn't modify original array...

ex> 

var oldArray = [1,2,3];
var timesFour = oldArray.map(function(val) {
	return val * 4;
});
console.log(timesFour); // returns [4,8,12]
console.log(oldArray); // return [1,2,3]

-Note: in ex the callback only uses the value of the array elem (val) but your callback can also inc agruments for index and array being acted on...


Condense Arrays w/ reduce
-used to iterate through an array and condese into one value
-to use, you pass in a callback whose args are an accumulator and the current value
-the accumulator is like a total that 'reduce' keeps track of after each operation
-current value is the next element in the array you're iterating through
-'reduce' has optional second argument which can be used to set initial value of the accumulator

ex> 

var singleVal = array.reduce(function(previousVal, currentVal) {
	return previousVal - currentVal;
}, 0);


Filter Arrays w/ filter
-used to iterate thru array and filter elements where a given condition is true
-'filter' is passed a callback fcn which takes the current value as an argument
-any array elem for which callback returns 'true' will be kept and elements returning false, filtered out...

ex>

array = array.filter(function(val) {
	return val !== 5;
});

Sort Arrays w/ sort
-used to sort vals in array alpha or numerically
-'sort' actaully alters the arrayin place
-'sort' can be passed a compare fcn as a callback
	-the compare fcn shld return a neg # if 'a' shld be b4 'b' and a pos # if 'a' should be after 'b', or '0' if =
-if no compare (callback) fcn passed, will convert the vals to strings and sort alpha...

ex> 

var array = [1, 12, 21, 2];
array.sort(function(a,b) {
	return a-b;
});


Reverse Arrays w/ reverse
-can use to 'reverse' elem of an array
-another method that alerts the array in place


ex>

var myArray = [1, 2, 3];
myArray.reverse() // returns 3, 2, 1


Concatenate Arrays w/ concat
-used to merge the contents of 2 arrays into one
-takes an array as an agrument & returns new array w/ the elements of this array concat onto the end

ex> 

newArray = oldArray.concat(otherArray);


Split strings w/ split
-used split string into array
uses arg you pass as delimiter to determine split points

Join strings w/ join
-use to 'join' each elem of array into a string sep by whatever delimiter you provide as an argument

ex>

var veggies = ['celery', 'carrots', 'cukes'];
var salad = veggies.join(' and ');

console.log(salad); // 'celery and carrots and cukes'

Algorithm Challenges.....

1) Reverse a string...
	-convert to array w/ .split
	-reverse w/ .reverse()
	-concant back into string w/ .join('')
	>>  str = str.split('').reverse().join('');

2) Factorialize a Number...

function factorialize(num) {
  if (num === 0) { return 1; }
  return num * factorialize(num-1);
}

3) Check for Palindromes...
  
  function palindrome(str) {
  // Good luck!
  console.log('original string = ' + str);
  str = str.toLowerCase().replace(/\d|\W|\s|_/gi,'');
  console.log('cleaned up string = ' + str);
  revStr = str.split('').reverse().join('');
  if (str == revStr){
    return true;
  }
  return false;
}

4) Find Longest Word in a String...

function findLongestWord(str) {
  wordArray = str.split(' ');
  var longestWord = 0;
  for (var i = 0; i < wordArray.length; i++) {
    if (wordArray[i].length > longestWord) {
      longestWord = wordArray[i].length; 
  }
  }
  return longestWord;
}

5) Title Case a Sentence...

function titleCase(str) {
  var strList = [];
  strList = str.split(' ');
  console.log(strList);
  for (var i = 0; i < strList.length; i++){
    strList[i] = strList[i].toLowerCase();
    strList[i] = strList[i].replace(strList[i].charAt(0),strList[i].charAt(0).toUpperCase());
  }
  str = strList.join(' ');
  return str;
}

6) Return Largest Number in Arrays...

function largestOfFour(arr) {
  // You can do this!
  var biggestNum = [];
  for(var i = 0; i < arr.length; i++){
    arr[i].sort(function(a,b){
      return b-a;
    });
  }
  for (var h = 0; h < arr.length; h++){
    biggestNum.push(arr[h][0]);
  }
  return biggestNum;
}


